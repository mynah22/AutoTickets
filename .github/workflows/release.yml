name: Build and Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Release for All Platforms
    runs-on: ubuntu-latest

    permissions:
      contents: write  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Determine next patch version
      id: version
      run: |
        git fetch --tags

        # obtain latest version tag 
        LATEST_TAG=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n 1)

        if [[ -z "$LATEST_TAG" ]]; then
          MAJOR=0
          MINOR=1
          PATCH=0
        else
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -dv -f2)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          PATCH=$((PATCH + 1))
        fi

        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_TAG"
        echo "version=$NEW_TAG" >> $GITHUB_OUTPUT


    - name: Build for Linux
      run: |
        VERSION=${{ steps.version.outputs.version}}
        GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=$VERSION" -o AutoTickets-Linux 
    - name: Build for Windows
      run: |
        VERSION=${{ steps.version.outputs.version}}
        GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=$VERSION" -o AutoTickets.exe
    - name: Build for macOS (intel)
      run: |
        VERSION=${{ steps.version.outputs.version}}
        GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=$VERSION" -o AutoTickets-Mac-Intel
    - name: Build for macOS (arm)
      run: |
        VERSION=${{ steps.version.outputs.version}}
        GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=$VERSION" -o AutoTickets-Mac-Arm

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        files: |
          AutoTickets-Linux
          AutoTickets.exe
          AutoTickets-Mac-Arm
          AutoTickets-Mac-Intel
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Push new tag to Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

